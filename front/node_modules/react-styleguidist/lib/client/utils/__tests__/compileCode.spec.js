import compileCode from '../compileCode';
import config from '../../../scripts/schemas/config';
var compilerConfig = config.compilerConfig.default;
describe('compileCode', function () {
  test('compile ES6 to ES5', function () {
    var result = compileCode("const {foo, bar} = baz", compilerConfig);
    expect(result).toMatchInlineSnapshot("\n\"var foo = baz.foo;\nvar bar = baz.bar;\"\n");
  });
  test('transform imports to require()', function () {
    var result = compileCode("import foo from 'bar'", compilerConfig);
    expect(result).toMatchInlineSnapshot("\n\"const bar$0 = require('bar');\nconst foo = bar$0.default || bar$0;\"\n");
  });
  test('transform async/await is not throw an error', function () {
    var onError = jest.fn();
    var result = compileCode("async function asyncFunction() { return await Promise.resolve(); }", compilerConfig, onError);
    expect(onError).not.toHaveBeenCalled();
    expect(result).toMatchInlineSnapshot("\"async function asyncFunction() { return await Promise.resolve(); }\"");
  });
  test('transform imports to require() in front of JSX', function () {
    var result = compileCode("\nimport foo from 'bar';\nimport Button from 'button';\n<Button />", compilerConfig);
    expect(result).toMatchInlineSnapshot("\n\"\nconst bar$0 = require('bar');\nconst foo = bar$0.default || bar$0;\nconst button$0 = require('button');\nconst Button = button$0.default || button$0;\nReact.createElement( Button, null )\"\n");
  });
  test('wrap JSX in Fragment', function () {
    var result = compileCode("<div>\n  <button>Click</button>\n</div>", compilerConfig);
    expect(result).toMatchInlineSnapshot("\n\"React.createElement( React.Fragment, null, React.createElement( 'div', null,\n  React.createElement( 'button', null, \\\"Click\\\" )\n) );\"\n");
  });
  test('don’t wrap JSX in Fragment if it’s in the middle', function () {
    var result = compileCode("const {foo, bar} = baz;\n<div>\n  <button>Click</button>\n</div>", compilerConfig);
    expect(result).toMatchInlineSnapshot("\n\"var foo = baz.foo;\nvar bar = baz.bar;\nReact.createElement( 'div', null,\n  React.createElement( 'button', null, \\\"Click\\\" )\n)\"\n");
  });
  test('tagged template literals', function () {
    var result = compileCode("const Button = styled.button`\n\tcolor: tomato;\n`;\n<Button />\n", compilerConfig);
    expect(result).toMatchInlineSnapshot("\n\"var templateObject = Object.freeze([\\\"\\\\n\\\\tcolor: tomato;\\\\n\\\"]);\nvar Button = styled.button(templateObject);\nReact.createElement( Button, null )\n\"\n");
  });
  test('onError callback', function () {
    var onError = jest.fn();
    var result = compileCode("=", compilerConfig, onError);
    expect(result).toBe('');
    expect(onError).toHaveBeenCalledWith(expect.objectContaining({
      message: 'Unexpected token (1:0)'
    }));
  });
});