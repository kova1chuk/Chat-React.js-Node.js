import transpileImports from '../transpileImports';
describe('transpileImports', function () {
  test('transpile default imports', function () {
    var result = transpileImports("import B from 'cat'");
    expect(result).toMatchInlineSnapshot("\n\"const cat$0 = require('cat');\nconst B = cat$0.default || cat$0;\"\n");
  });
  test('transpile named imports', function () {
    var result = transpileImports("import {B} from 'cat'");
    expect(result).toMatchInlineSnapshot("\n\"const cat$0 = require('cat');\nconst B = cat$0.B;\"\n");
  });
  test('transpile mixed imports', function () {
    var result = transpileImports("import A, {B} from 'cat'");
    expect(result).toMatchInlineSnapshot("\n\"const cat$0 = require('cat');\nconst A = cat$0.default || cat$0;\nconst B = cat$0.B;\"\n");
  });
  test('transpile multiple import statements', function () {
    var result = transpileImports("/**\n* Some important comment\n*/\nimport 'dog'\n/* Less important comments */\nimport B from 'cat'\n// Absolutely not important comment\nimport C from 'capybara'\nimport D from 'hamster' // One more comment\nimport E from 'snake'\n");
    expect(result).toMatchInlineSnapshot("\n\"/**\n* Some important comment\n*/\nrequire('dog');\n/* Less important comments */\nconst cat$0 = require('cat');\nconst B = cat$0.default || cat$0;\n// Absolutely not important comment\nconst capybara$0 = require('capybara');\nconst C = capybara$0.default || capybara$0;\nconst hamster$0 = require('hamster');\nconst D = hamster$0.default || hamster$0; // One more comment\nconst snake$0 = require('snake');\nconst E = snake$0.default || snake$0;\n\"\n");
  });
  test('transpile multiline named imports without trailing comma', function () {
    var result = transpileImports("import {\n  B,\n  C\n} from 'cat'\n");
    expect(result).toMatchInlineSnapshot("\n\"const cat$0 = require('cat');\nconst B = cat$0.B;\nconst C = cat$0.C;\n\"\n");
  });
  test('transpile multiline named imports with trailing comma', function () {
    var result = transpileImports("import {\n  B,\n  C,\n} from 'cat'\n");
    expect(result).toMatchInlineSnapshot("\n\"const cat$0 = require('cat');\nconst B = cat$0.B;\nconst C = cat$0.C;\n\"\n");
  });
  test('return code if there are no imports', function () {
    var code = "<Button />";
    var result = transpileImports(code);
    expect(result).toEqual(code);
  });
  test('return code if there is an import and a syntax error', function () {
    var code = "import foo from 'foo';&";
    var result = transpileImports(code);
    expect(result).toEqual(code);
  });
});