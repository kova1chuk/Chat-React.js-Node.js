import "core-js/modules/es.function.name";
import deepfreeze from 'deep-freeze-es6';
import processComponents from '../processComponents';
describe('processComponents', function () {
  it('should set componentsâ€™ displayName to a name property', function () {
    var components = deepfreeze([{
      props: {
        displayName: 'Foo'
      },
      module: 13
    }]);
    var result = processComponents(components);
    expect(result[0].name).toBe('Foo');
  });
  describe('should set visibleName property on the component', function () {
    it('from an visibleName component prop if available', function () {
      var components = deepfreeze([{
        props: {
          displayName: 'Foo',
          visibleName: 'Foo Bar'
        },
        module: 13
      }]);
      var result = processComponents(components);
      expect(result[0].visibleName).toBe('Foo Bar');
    });
    it('from an displayName component prop if visibleName prop is not available', function () {
      var components = deepfreeze([{
        props: {
          displayName: 'Foo'
        },
        module: 13
      }]);
      var result = processComponents(components);
      expect(result[0].visibleName).toBe('Foo');
    });
  });
  it('should append @example doclet to all examples', function () {
    var components = deepfreeze([{
      props: {
        displayName: 'Foo',
        examples: [1, 2],
        example: [3, 4]
      },
      module: 11
    }]);
    var result = processComponents(components);
    expect(result[0].props.examples).toEqual([1, 2, 3, 4]);
  });
});