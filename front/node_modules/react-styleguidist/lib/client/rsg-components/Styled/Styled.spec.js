import "core-js/modules/es.object.assign";

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { Component } from 'react';
import { render } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import Styled from './Styled';
import Context from '../Context';
var context = {
  config: {
    theme: {},
    styles: {}
  }
};

var Provider = function Provider(props) {
  return React.createElement(Context.Provider, _extends({
    value: context
  }, props));
};
/* eslint-disable react/prefer-stateless-function, react/prop-types */


var styles = function styles() {
  return {
    foo: {
      color: 'red'
    }
  };
};

var TestRenderer =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(TestRenderer, _Component);

  function TestRenderer() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = TestRenderer.prototype;

  _proto.render = function render() {
    return React.createElement("div", {
      className: this.props.classes.foo,
      "data-testid": this.props.testId
    });
  };

  return TestRenderer;
}(Component);

test('should set displayName', function () {
  var WrappedComponent = Styled(styles)(TestRenderer);
  expect(WrappedComponent.displayName).toBe('Styled(Test)');
});
test('should wrap a component and pass props and classes', function () {
  var WrappedComponent = Styled(styles)(TestRenderer);

  var _render = render(React.createElement(Provider, null, React.createElement(WrappedComponent, {
    testId: "element"
  }))),
      getByTestId = _render.getByTestId;

  expect(getByTestId('element')).toHaveAttribute('class', expect.stringMatching(/^rsg--foo-\d+$/));
});