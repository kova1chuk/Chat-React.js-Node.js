"use strict";

require("core-js/modules/es.array.iterator");

var _path = _interopRequireDefault(require("path"));

var _findFileCaseInsensitive = _interopRequireWildcard(require("../findFileCaseInsensitive"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

it('should return a file path with the correct case if a file exists', () => {
  const result = (0, _findFileCaseInsensitive.default)(_path.default.join(__dirname, 'Findfilecaseinsensitive.Spec.TS'));
  expect(result).toMatch(__filename);
});
it('should return undefined if a file doesn’t exist', () => {
  const result = (0, _findFileCaseInsensitive.default)(_path.default.join(__dirname, 'pizza.js'));
  expect(result).toBeFalsy();
});
it('cache clean function shouldn’t throw', () => {
  const fn = () => (0, _findFileCaseInsensitive.clearCache)();

  expect(fn).not.toThrowError();
});