'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = function (_ref) {
  var xhr = _ref.xhr,
      progress = _ref.progress,
      resolve = _ref.resolve;

  xhr.upload.addEventListener('progress', function (event) {
    if (!progress) return false;
    progress(Math.round(event.loaded / event.total * 100));
  });

  xhr.addEventListener('load', function () {
    var response = void 0;
    try {
      response = JSON.parse(xhr.response);
    } catch (e) {
      response = xhr.response;
    }

    var headers = xhr.getAllResponseHeaders().trim().split(/[\r\n]+/).map(function (line) {
      return line.split(': ');
    }).reduce(function (acc, _ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          header = _ref3[0],
          value = _ref3[1];

      acc[header] = value;
      return acc;
    }, {});

    resolve({
      response: response,
      error: xhr.status < 200 || xhr.status >= 300,
      status: xhr.status,
      headers: headers
    });
  });

  xhr.addEventListener('error', function (error) {
    resolve({ error: error, status: xhr.status, response: xhr.response });
  });

  xhr.addEventListener('abort', function (aborted) {
    resolve({ aborted: aborted });
  });
};