{"ast":null,"code":"import { withFormik } from \"formik\";\nimport get from \"lodash/get\";\nimport RegisterForm from \"../components/RegisterForm\";\nimport { userActions } from \"redux/actions\";\nimport validateForm from \"utils/validate\";\nimport { openNotification } from \"utils/helpers\";\nimport store from \"redux/store\";\nexport default withFormik({\n  enableReinitialize: true,\n  mapPropsToValues: () => ({\n    email: \"\",\n    fullname: \"\",\n    password: \"\",\n    password_2: \"\"\n  }),\n  validate: values => {\n    let errors = {};\n    validateForm({\n      isAuth: false,\n      values,\n      errors\n    });\n    return errors;\n  },\n  handleSubmit: (values, {\n    setSubmitting,\n    props\n  }) => {\n    store.dispatch(userActions.fetchUserRegister(values)).then(() => {\n      props.history.push(\"/signup/verify\");\n      setSubmitting(false);\n    }).catch(err => {\n      if (get(err, \"response.data.message.errmsg\", \"\").indexOf(\"dup\") >= 0) {\n        openNotification({\n          title: \"Ошибка\",\n          text: \"Аккаунт с такой почтой уже создан.\",\n          type: \"error\",\n          duration: 5000\n        });\n      } else {\n        openNotification({\n          title: \"Ошибка\",\n          text: \"Возникла серверная ошибка при регистрации. Повторите позже.\",\n          type: \"error\",\n          duration: 5000\n        });\n      }\n\n      setSubmitting(false);\n    });\n  },\n  displayName: \"RegisterForm\"\n})(RegisterForm);","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/chat-reactj-nodejs/src/modules/RegisterForm/containers/RegisterForm.js"],"names":["withFormik","get","RegisterForm","userActions","validateForm","openNotification","store","enableReinitialize","mapPropsToValues","email","fullname","password","password_2","validate","values","errors","isAuth","handleSubmit","setSubmitting","props","dispatch","fetchUserRegister","then","history","push","catch","err","indexOf","title","text","type","duration","displayName"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,eAAeN,UAAU,CAAC;AACxBO,EAAAA,kBAAkB,EAAE,IADI;AAExBC,EAAAA,gBAAgB,EAAE,OAAO;AACvBC,IAAAA,KAAK,EAAE,EADgB;AAEvBC,IAAAA,QAAQ,EAAE,EAFa;AAGvBC,IAAAA,QAAQ,EAAE,EAHa;AAIvBC,IAAAA,UAAU,EAAE;AAJW,GAAP,CAFM;AAQxBC,EAAAA,QAAQ,EAAEC,MAAM,IAAI;AAClB,QAAIC,MAAM,GAAG,EAAb;AACAX,IAAAA,YAAY,CAAC;AAAEY,MAAAA,MAAM,EAAE,KAAV;AAAiBF,MAAAA,MAAjB;AAAyBC,MAAAA;AAAzB,KAAD,CAAZ;AACA,WAAOA,MAAP;AACD,GAZuB;AAaxBE,EAAAA,YAAY,EAAE,CAACH,MAAD,EAAS;AAAEI,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAT,KAAsC;AAClDb,IAAAA,KAAK,CACFc,QADH,CACYjB,WAAW,CAACkB,iBAAZ,CAA8BP,MAA9B,CADZ,EAEGQ,IAFH,CAEQ,MAAM;AACVH,MAAAA,KAAK,CAACI,OAAN,CAAcC,IAAd,CAAmB,gBAAnB;AACAN,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KALH,EAMGO,KANH,CAMSC,GAAG,IAAI;AACZ,UAAIzB,GAAG,CAACyB,GAAD,EAAM,8BAAN,EAAsC,EAAtC,CAAH,CAA6CC,OAA7C,CAAqD,KAArD,KAA+D,CAAnE,EAAsE;AACpEtB,QAAAA,gBAAgB,CAAC;AACfuB,UAAAA,KAAK,EAAE,QADQ;AAEfC,UAAAA,IAAI,EAAE,oCAFS;AAGfC,UAAAA,IAAI,EAAE,OAHS;AAIfC,UAAAA,QAAQ,EAAE;AAJK,SAAD,CAAhB;AAMD,OAPD,MAOO;AACL1B,QAAAA,gBAAgB,CAAC;AACfuB,UAAAA,KAAK,EAAE,QADQ;AAEfC,UAAAA,IAAI,EAAE,6DAFS;AAGfC,UAAAA,IAAI,EAAE,OAHS;AAIfC,UAAAA,QAAQ,EAAE;AAJK,SAAD,CAAhB;AAMD;;AACDb,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAvBH;AAwBD,GAtCuB;AAuCxBc,EAAAA,WAAW,EAAE;AAvCW,CAAD,CAAV,CAwCZ9B,YAxCY,CAAf","sourcesContent":["import { withFormik } from \"formik\";\nimport get from \"lodash/get\";\n\nimport RegisterForm from \"../components/RegisterForm\";\n\nimport { userActions } from \"redux/actions\";\nimport validateForm from \"utils/validate\";\nimport { openNotification } from \"utils/helpers\";\n\nimport store from \"redux/store\";\n\nexport default withFormik({\n  enableReinitialize: true,\n  mapPropsToValues: () => ({\n    email: \"\",\n    fullname: \"\",\n    password: \"\",\n    password_2: \"\"\n  }),\n  validate: values => {\n    let errors = {};\n    validateForm({ isAuth: false, values, errors });\n    return errors;\n  },\n  handleSubmit: (values, { setSubmitting, props }) => {\n    store\n      .dispatch(userActions.fetchUserRegister(values))\n      .then(() => {\n        props.history.push(\"/signup/verify\");\n        setSubmitting(false);\n      })\n      .catch(err => {\n        if (get(err, \"response.data.message.errmsg\", \"\").indexOf(\"dup\") >= 0) {\n          openNotification({\n            title: \"Ошибка\",\n            text: \"Аккаунт с такой почтой уже создан.\",\n            type: \"error\",\n            duration: 5000\n          });\n        } else {\n          openNotification({\n            title: \"Ошибка\",\n            text: \"Возникла серверная ошибка при регистрации. Повторите позже.\",\n            type: \"error\",\n            duration: 5000\n          });\n        }\n        setSubmitting(false);\n      });\n  },\n  displayName: \"RegisterForm\"\n})(RegisterForm);\n"]},"metadata":{},"sourceType":"module"}