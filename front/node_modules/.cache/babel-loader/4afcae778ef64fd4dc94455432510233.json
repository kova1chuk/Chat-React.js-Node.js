{"ast":null,"code":"import _slicedToArray from \"/home/oleksii/Documents/Programming/chat-reactj-nodejs/front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/oleksii/Documents/Programming/chat-reactj-nodejs/front/src/containers/Dialogs.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { dialogsActions } from \"redux/actions\";\nimport { Dialogs as BaseDialogs } from \"components\";\n\nconst Dialogs = ({\n  fetchDialogs,\n  items,\n  userId\n}) => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchValue = _useState2[0],\n        setSearchValue = _useState2[1];\n\n  const _useState3 = useState(Array.from(items)),\n        _useState4 = _slicedToArray(_useState3, 2),\n        filtred = _useState4[0],\n        setFiltred = _useState4[1];\n\n  const onChangeInput = value => {\n    setFiltred(items.filter(dialog => dialog.user.fullname.toLowerCase().indexOf(value.toLowerCase()) >= 0));\n    setSearchValue(value);\n  };\n\n  useEffect(() => {\n    console.log(324);\n\n    if (!items.length) {\n      fetchDialogs();\n    }\n\n    setFiltredItems(items);\n  }, [items]);\n  return React.createElement(BaseDialogs, {\n    userId: userId,\n    items: filtred,\n    onSearch: onChangeInput,\n    inputValue: searchValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n};\n\nexport default connect(({\n  dialogs\n}) => dialogs, dialogsActions)(Dialogs);","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/chat-reactj-nodejs/front/src/containers/Dialogs.jsx"],"names":["React","useState","useEffect","connect","dialogsActions","Dialogs","BaseDialogs","fetchDialogs","items","userId","searchValue","setSearchValue","Array","from","filtred","setFiltred","onChangeInput","value","filter","dialog","user","fullname","toLowerCase","indexOf","console","log","length","setFiltredItems","dialogs"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,YAAvC;;AAEA,MAAMD,OAAO,GAAG,CAAC;AAAEE,EAAAA,YAAF;AAAgBC,EAAAA,KAAhB;AAAuBC,EAAAA;AAAvB,CAAD,KAAqC;AAAA,oBACbR,QAAQ,CAAC,EAAD,CADK;AAAA;AAAA,QAC5CS,WAD4C;AAAA,QAC/BC,cAD+B;;AAAA,qBAErBV,QAAQ,CAACW,KAAK,CAACC,IAAN,CAAWL,KAAX,CAAD,CAFa;AAAA;AAAA,QAE5CM,OAF4C;AAAA,QAEnCC,UAFmC;;AAInD,QAAMC,aAAa,GAAGC,KAAK,IAAI;AAC7BF,IAAAA,UAAU,CACRP,KAAK,CAACU,MAAN,CACEC,MAAM,IACJA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBC,WAArB,GAAmCC,OAAnC,CAA2CN,KAAK,CAACK,WAAN,EAA3C,KAAmE,CAFvE,CADQ,CAAV;AAMAX,IAAAA,cAAc,CAACM,KAAD,CAAd;AACD,GARD;;AAUAf,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,QAAI,CAACjB,KAAK,CAACkB,MAAX,EAAmB;AACjBnB,MAAAA,YAAY;AACb;;AACDoB,IAAAA,eAAe,CAACnB,KAAD,CAAf;AACD,GANQ,EAMN,CAACA,KAAD,CANM,CAAT;AAQA,SACE,oBAAC,WAAD;AACE,IAAA,MAAM,EAAEC,MADV;AAEE,IAAA,KAAK,EAAEK,OAFT;AAGE,IAAA,QAAQ,EAAEE,aAHZ;AAIE,IAAA,UAAU,EAAEN,WAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CA9BD;;AAgCA,eAAeP,OAAO,CAAC,CAAC;AAAEyB,EAAAA;AAAF,CAAD,KAAiBA,OAAlB,EAA2BxB,cAA3B,CAAP,CAAkDC,OAAlD,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { dialogsActions } from \"redux/actions\";\nimport { Dialogs as BaseDialogs } from \"components\";\n\nconst Dialogs = ({ fetchDialogs, items, userId }) => {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [filtred, setFiltred] = useState(Array.from(items));\n\n  const onChangeInput = value => {\n    setFiltred(\n      items.filter(\n        dialog =>\n          dialog.user.fullname.toLowerCase().indexOf(value.toLowerCase()) >= 0\n      )\n    );\n    setSearchValue(value);\n  };\n\n  useEffect(() => {\n    console.log(324);\n    if (!items.length) {\n      fetchDialogs();\n    }\n    setFiltredItems(items);\n  }, [items]);\n\n  return (\n    <BaseDialogs\n      userId={userId}\n      items={filtred}\n      onSearch={onChangeInput}\n      inputValue={searchValue}\n    />\n  );\n};\n\nexport default connect(({ dialogs }) => dialogs, dialogsActions)(Dialogs);\n"]},"metadata":{},"sourceType":"module"}