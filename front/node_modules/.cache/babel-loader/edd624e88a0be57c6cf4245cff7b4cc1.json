{"ast":null,"code":"import { withFormik } from \"formik\";\nimport LoginForm from \"../components/LoginForm\";\nimport validateForm from \"utils/validate\";\nexport default withFormik({\n  enableReinitialize: true,\n  mapPropsToValue: () => ({\n    email: \"\",\n    password: \"\"\n  }),\n  validate: values => {\n    let errors = {};\n    validateForm({\n      isAuth: true,\n      values,\n      errors\n    });\n    return errors;\n  },\n  handleSubmit: (values, {\n    setSubmitting\n  }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 1000);\n  },\n  displayName: \"RegisterForm\"\n})(LoginForm);","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/chat-reactj-nodejs/src/modules/LoginForm/containers/LoginForm.js"],"names":["withFormik","LoginForm","validateForm","enableReinitialize","mapPropsToValue","email","password","validate","values","errors","isAuth","handleSubmit","setSubmitting","setTimeout","alert","JSON","stringify","displayName"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,eAAeF,UAAU,CAAC;AACxBG,EAAAA,kBAAkB,EAAE,IADI;AAExBC,EAAAA,eAAe,EAAE,OAAO;AACtBC,IAAAA,KAAK,EAAE,EADe;AAEtBC,IAAAA,QAAQ,EAAE;AAFY,GAAP,CAFO;AAOxBC,EAAAA,QAAQ,EAAEC,MAAM,IAAI;AAClB,QAAIC,MAAM,GAAG,EAAb;AAEAP,IAAAA,YAAY,CAAC;AAAEQ,MAAAA,MAAM,EAAE,IAAV;AAAgBF,MAAAA,MAAhB;AAAwBC,MAAAA;AAAxB,KAAD,CAAZ;AAEA,WAAOA,MAAP;AACD,GAbuB;AAexBE,EAAAA,YAAY,EAAE,CAACH,MAAD,EAAS;AAAEI,IAAAA;AAAF,GAAT,KAA+B;AAC3CC,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeR,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAI,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAHS,EAGP,IAHO,CAAV;AAID,GApBuB;AAsBxBK,EAAAA,WAAW,EAAE;AAtBW,CAAD,CAAV,CAuBZhB,SAvBY,CAAf","sourcesContent":["import { withFormik } from \"formik\";\n\nimport LoginForm from \"../components/LoginForm\";\nimport validateForm from \"utils/validate\";\n\nexport default withFormik({\n  enableReinitialize: true,\n  mapPropsToValue: () => ({\n    email: \"\",\n    password: \"\"\n  }),\n\n  validate: values => {\n    let errors = {};\n\n    validateForm({ isAuth: true, values, errors });\n\n    return errors;\n  },\n\n  handleSubmit: (values, { setSubmitting }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 1000);\n  },\n\n  displayName: \"RegisterForm\"\n})(LoginForm);\n"]},"metadata":{},"sourceType":"module"}