{"ast":null,"code":"import { withFormik } from \"formik\";\nimport RegisterForm from \"../components/RegisterForm\";\nexport default withFormik({\n  enableReinitialize: true,\n  mapPropsToValues: () => ({\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    password_2: \"\"\n  }),\n  validate: values => {\n    let errors = {};\n\n    if (!values.email) {\n      errors.email = \"Required\";\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n      errors.email = \"Invalid email address\";\n    }\n\n    if (values.password) {\n      errors.password = \"Enter password\";\n    } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/.test(values.password)) {\n      errors.password = \"Enter strong password\";\n    }\n\n    return errors;\n  },\n  handleSubmit: (values, {\n    setSubmitting\n  }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 1000);\n  },\n  displayName: \"RegisterForm\"\n})(RegisterForm);","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/chat-reactj-nodejs/src/modules/RegisterForm/containers/RegisterForm.js"],"names":["withFormik","RegisterForm","enableReinitialize","mapPropsToValues","email","username","password","password_2","validate","values","errors","test","handleSubmit","setSubmitting","setTimeout","alert","JSON","stringify","displayName"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AAEA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,eAAeD,UAAU,CAAC;AACxBE,EAAAA,kBAAkB,EAAE,IADI;AAExBC,EAAAA,gBAAgB,EAAE,OAAO;AACvBC,IAAAA,KAAK,EAAE,EADgB;AAEvBC,IAAAA,QAAQ,EAAE,EAFa;AAGvBC,IAAAA,QAAQ,EAAE,EAHa;AAIvBC,IAAAA,UAAU,EAAE;AAJW,GAAP,CAFM;AASxBC,EAAAA,QAAQ,EAAEC,MAAM,IAAI;AAClB,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAI,CAACD,MAAM,CAACL,KAAZ,EAAmB;AACjBM,MAAAA,MAAM,CAACN,KAAP,GAAe,UAAf;AACD,KAFD,MAEO,IACL,CAAC,4CAA4CO,IAA5C,CAAiDF,MAAM,CAACL,KAAxD,CADI,EAEL;AACAM,MAAAA,MAAM,CAACN,KAAP,GAAe,uBAAf;AACD;;AAED,QAAIK,MAAM,CAACH,QAAX,EAAqB;AACnBI,MAAAA,MAAM,CAACJ,QAAP,GAAkB,gBAAlB;AACD,KAFD,MAEO,IAAI,CAAC,qCAAqCK,IAArC,CAA0CF,MAAM,CAACH,QAAjD,CAAL,EAAiE;AACtEI,MAAAA,MAAM,CAACJ,QAAP,GAAkB,uBAAlB;AACD;;AACD,WAAOI,MAAP;AACD,GAzBuB;AA2BxBE,EAAAA,YAAY,EAAE,CAACH,MAAD,EAAS;AAAEI,IAAAA;AAAF,GAAT,KAA+B;AAC3CC,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeR,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAI,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAHS,EAGP,IAHO,CAAV;AAID,GAhCuB;AAkCxBK,EAAAA,WAAW,EAAE;AAlCW,CAAD,CAAV,CAmCZjB,YAnCY,CAAf","sourcesContent":["import { withFormik } from \"formik\";\n\nimport RegisterForm from \"../components/RegisterForm\";\n\nexport default withFormik({\n  enableReinitialize: true,\n  mapPropsToValues: () => ({\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    password_2: \"\"\n  }),\n\n  validate: values => {\n    let errors = {};\n    if (!values.email) {\n      errors.email = \"Required\";\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = \"Invalid email address\";\n    }\n\n    if (values.password) {\n      errors.password = \"Enter password\";\n    } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/.test(values.password)) {\n      errors.password = \"Enter strong password\";\n    }\n    return errors;\n  },\n\n  handleSubmit: (values, { setSubmitting }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 1000);\n  },\n\n  displayName: \"RegisterForm\"\n})(RegisterForm);\n"]},"metadata":{},"sourceType":"module"}